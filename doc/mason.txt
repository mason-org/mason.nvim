*mason.nvim*

Minimum version of neovim: 0.7.0

Author: William Boman
                                       Type |gO| to see the table of contents.

==============================================================================
INTRODUCTION                                              *mason-introduction*

`mason.nvim` is a Neovim plugin that allow you to easily manage external
editor tooling such as LSP servers, DAP servers, linters, and formatters
through a single interface. It runs everywhere Neovim runs (across Linux,
macOS, Windows, etc.), with only a small set of external requirements needed.

Packages are installed to Neovim's `:h stdpath` by default. Executables are
linked to a single `bin/` directory, which `mason.nvim` will add to the
Neovim's PATH during setup, allowing easy access for the builtin
shell/terminal as well as other 3rd party plugins.

                                                         *mason-api-reference*
API reference:
    https://github.com/williamboman/mason.nvim/blob/main/doc/reference.md

                                                            *mason-extensions*
Extensions:
    - https://github.com/williamboman/mason-lspconfig.nvim

3rd party extensions: https://github.com/williamboman/mason.nvim/wiki/Extensions

==============================================================================
REQUIREMENTS                                              *mason-requirements*

`mason.nvim` relaxes the minimum requirements by attempting multiple different
utilities (for example, `wget`, `curl`, and `Invoke-WebRequest` are all
perfect substitutes). The _minimum_ recommended requirements are:

-   neovim `>= 0.7.0`
-   For Unix systems: `git(1)`, `curl(1)` or `wget(1)`, `unzip(1)`, `tar(1)`,
    `gzip(1)`
-   For Windows systems: powershell, git, tar, and 7zip or peazip or archiver
    or winzip or WinRAR

Note that `mason.nvim` will regularly shell out to external package managers,
such as `cargo` and `npm`. Depending on your personal usage, some of these
will also need to be installed. Refer to `:checkhealth mason` for a full list.

==============================================================================
QUICK START                                                 *mason-quickstart*

The only thing needed to get started with mason.nvim is to make sure
to call the `setup()` function:

    require("mason").setup()

This will enhance the Neovim session's PATH environment with the location of
executables installed with mason.nvim.

To view the UI for mason, run:
    :Mason

Install a package via `:MasonInstall`, for example:
    :MasonInstall stylua

You may also install multiple packages at a time:
    :MasonInstall stylua lua-language-server

To install a specific version of a package, you may provide it as part of the
package name, like so:

    :MasonInstall rust-analyzer@nightly

Please refer to each package's own release pages to find which versions are
available.

==============================================================================
HOW TO INSTALL PACKAGES                        *mason-how-to-install-packages*

You may install packages either via the command interface or via Mason's Lua
APIs. See |MasonInstall| or |mason-api-reference| for more details.

==============================================================================
HOW TO USE PACKAGES                                *mason-how-to-use-packages*

Although many packages are perfectly usable out of the box through Neovim
builtins, it is recommended to use other 3rd party plugins to further
integrate these. The following plugins are recommended:

-   LSP: `lspconfig` & `mason-lspconfig.nvim`
-   DAP: `nvim-dap`
-   Linters: `null-ls.nvim` or `nvim-lint`
-   Formatters: `null-ls.nvim` or `formatter.nvim`

formatter.nvim        https://github.com/mhartington/formatter.nvim
lspconfig             https://github.com/neovim/nvim-lspconfig
mason-lspconfig.nvim  https://github.com/williamboman/mason-lspconfig.nvim
null-ls.nvim          https://github.com/jose-elias-alvarez/null-ls.nvim
nvim-dap              https://github.com/mfussenegger/nvim-dap
nvim-lint             https://github.com/mfussenegger/nvim-lint


==============================================================================
COMMANDS                                                      *mason-commands*

------------------------------------------------------------------------------
OPEN THE MASON WINDOW                                                 *:Mason*

:Mason

Opens the graphical status window.

------------------------------------------------------------------------------
INSTALLING PACKAGES                                            *:MasonInstall*

:MasonInstall <package> ...

Installs the provided packages. Packages may include a version specifier,
like so:

    :MasonInstall lua-language-server@v3.0.0

Runs in blocking fashion if there are no UIs attached (i.e. running in
headless mode), example:

    $ nvim --headless -c "MasonInstall stylua" -c "qall"

------------------------------------------------------------------------------
UNINSTALLING PACKAGES                                        *:MasonUninstall*

:MasonUninstall <package> ...

Uninstalls the provided packages.

------------------------------------------------------------------------------
UNINSTALLING ALL PACKAGES                                 *:MasonUninstallAll*

:MasonUninstallAll

Uninstalls all installed packages.

------------------------------------------------------------------------------
VIEW THE MASON LOG                                                 *:MasonLog*

:MasonLog

Opens the log file in a new tab window.

==============================================================================
SETTINGS                                                      *mason-settings*

You can configure certain behavior of mason when calling the `.setup()`
function.

Refer to the |mason-default-settings| for all available settings.

Example:

    require("mason").setup({
        ui = {
            icons = {
                package_installed = "✓",
                package_pending = "➜",
                package_uninstalled = "✗"
            }
        }
    })

                                                      *mason-default-settings*

    local DEFAULT_SETTINGS = {
        ui = {
            -- Whether to automatically check for new versions when opening the :Mason window.
            check_outdated_packages_on_open = true,

            -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.
            border = "none",

            icons = {
                -- The list icon to use for installed packages.
                package_installed = "◍",
                -- The list icon to use for packages that are installing, or queued for installation.
                package_pending = "◍",
                -- The list icon to use for packages that are not installed.
                package_uninstalled = "◍",
            },

            keymaps = {
                -- Keymap to expand a package
                toggle_package_expand = "<CR>",
                -- Keymap to install the package under the current cursor position
                install_package = "i",
                -- Keymap to reinstall/update the package under the current cursor position
                update_package = "u",
                -- Keymap to check for new version for the package under the current cursor position
                check_package_version = "c",
                -- Keymap to update all installed packages
                update_all_packages = "U",
                -- Keymap to check which installed packages are outdated
                check_outdated_packages = "C",
                -- Keymap to uninstall a package
                uninstall_package = "X",
                -- Keymap to cancel a package installation
                cancel_installation = "<C-c>",
                -- Keymap to apply language filter
                apply_language_filter = "<C-f>",
            },
        },

        -- The directory in which to install packages.
        install_root_dir = path.concat { vim.fn.stdpath "data", "mason" },

        pip = {
            -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior
            -- and is not recommended.
            --
            -- Example: { "--proxy", "https://proxyserver" }
            install_args = {},
        },

        -- Controls to which degree logs are written to the log file. It's useful to set this to vim.log.levels.DEBUG when
        -- debugging issues with package installations.
        log_level = vim.log.levels.INFO,

        -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further
        -- packages that are requested to be installed will be put in a queue.
        max_concurrent_installers = 4,

        github = {
            -- The template URL to use when downloading assets from GitHub.
            -- The placeholders are the following (in order):
            -- 1. The repository (e.g. "rust-lang/rust-analyzer")
            -- 2. The release version (e.g. "v0.3.0")
            -- 3. The asset name (e.g. "rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz")
            download_url_template = "https://github.com/%s/releases/download/%s/%s",
        },
    }


==============================================================================
DOWNLOAD MIRRORS                                      *mason-download-mirrors*

------------------------------------------------------------------------------
GITHUB MIRROR                                   *mason-download-mirror-github*

    It's possible to customize the download URL used when downloading assets
    from GitHub releases by setting the `github.download_url_template`
    settings during setup, like so:

    require("mason").setup {
        github = {
            -- The template URL to use when downloading assets from GitHub.
            -- The placeholders are the following (in order):
            -- 1. The repository (e.g. "rust-lang/rust-analyzer")
            -- 2. The release version (e.g. "v0.3.0")
            -- 3. The asset name (e.g. "rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz")
            download_url_template = "https://my.mirror.com/%s/releases/download/%s/%s",
        },
    }


==============================================================================
INSTALLATION ERRORS                                             *mason-errors*

                                                     *mason-errors-github-api*
For some installers, the GitHub API is used to fetch information about
releases. This API imposes a rate limit that may be triggered, causing
installations to fail. The reasons why a rate limit is triggered are many, for
example being behind a public API, or using other software that also send
requests to the GitHub API.

To circumvent this, mason will utilize the GitHub CLI when
available, leading to API requests being subject to a much higher rate limit
threshold when authenticated. Should you run into errors with communicating
with GitHub's API, it's recommended to install, and authenticate, the GitHub
CLI: https://cli.github.com/.

==============================================================================
DEBUGGING                                                    *mason-debugging*

To help with debugging issues with installing/uninstalling packages, please
make sure to set mason's log level to DEBUG or TRACE, like so:

    require("mason").setup {
        log_level = vim.log.levels.DEBUG
    }

You may find the logs by entering the command `:MasonLog`. Providing the
contents of this file when reporting an issue will help tremendously. Remember
to redo whatever is failing after changing the log level in order to capture
new log entries.

==============================================================================
Lua module: mason

                                                               *mason.setup()*
setup({config})
    Sets up mason with the provided {config} (see |mason-settings|).

==============================================================================
Lua module: mason-registry

                                               *mason-registry.is_installed()*
is_installed({package_name})
    Checks whether the provided package name is installed. In many situations,
    this is a more efficient option than the Package:is_installed() method due
    to a smaller amount of modules required to load.

    Parameters:
        {package_name} - string

    Returns:
        boolean

                                                *mason-registry.get_package()*
get_package({package_name})
    Returns an instance of the Package class if the provided package name
    exists.

    This function errors if a package cannot be found.

    Parameters:
        {package_name} - string

    Returns:
        Package

                                     *mason-registry.get_installed_packages()*
get_installed_packages()
    Returns all installed package instances. This is a slower function that
    loads more modules.

    Returns:
        Package[]

                                *mason-registry.get_installed_package_names()*
get_installed_package_names()
    Returns all installed package names. This is a fast function that doesn't
    load any extra modules.

    Returns:
        string[]

                                           *mason-registry.get_all_packages()*
get_all_packages()
    Returns all package instances. This is a slower function that loads more
    modules.

    Returns:
        Package[]

                                      *mason-registry.get_all_package_names()*
get_all_package_names()
    Returns all package names. This is a fast function that doesn't load any
    extra modules.

    Returns:
        string[]


vim:tw=78:ft=help:norl:expandtab:sw=4
